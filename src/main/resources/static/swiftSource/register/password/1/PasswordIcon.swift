//
//  PasswordIcon.swift
//  ThorSDK
//
//  Created by AuthorName on 2019/4/17.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class PasswordIcon : NSObject {
    
    //// Drawing Methods
    
    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 13), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 13), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 13)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Password.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.35, y: 10.18))
        bezierPath.addCurve(to: CGPoint(x: 4.98, y: 9.82), controlPoint1: CGPoint(x: 5.15, y: 10.18), controlPoint2: CGPoint(x: 4.98, y: 10.02))
        bezierPath.addLine(to: CGPoint(x: 4.98, y: 9.17))
        bezierPath.addCurve(to: CGPoint(x: 4.32, y: 8.2), controlPoint1: CGPoint(x: 4.59, y: 9.02), controlPoint2: CGPoint(x: 4.32, y: 8.63))
        bezierPath.addCurve(to: CGPoint(x: 5.35, y: 7.17), controlPoint1: CGPoint(x: 4.32, y: 7.64), controlPoint2: CGPoint(x: 4.78, y: 7.17))
        bezierPath.addCurve(to: CGPoint(x: 6.38, y: 8.2), controlPoint1: CGPoint(x: 5.91, y: 7.17), controlPoint2: CGPoint(x: 6.38, y: 7.64))
        bezierPath.addCurve(to: CGPoint(x: 5.71, y: 9.17), controlPoint1: CGPoint(x: 6.38, y: 8.63), controlPoint2: CGPoint(x: 6.1, y: 9.02))
        bezierPath.addLine(to: CGPoint(x: 5.71, y: 9.82))
        bezierPath.addCurve(to: CGPoint(x: 5.35, y: 10.18), controlPoint1: CGPoint(x: 5.71, y: 10.02), controlPoint2: CGPoint(x: 5.55, y: 10.18))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 1.3, y: 13.18))
        bezier2Path.addCurve(to: CGPoint(x: 0.13, y: 11.94), controlPoint1: CGPoint(x: 0.66, y: 13.18), controlPoint2: CGPoint(x: 0.13, y: 12.63))
        bezier2Path.addLine(to: CGPoint(x: 0.13, y: 5.94))
        bezier2Path.addLine(to: CGPoint(x: 10.56, y: 5.94))
        bezier2Path.addLine(to: CGPoint(x: 10.56, y: 11.95))
        bezier2Path.addCurve(to: CGPoint(x: 9.39, y: 13.18), controlPoint1: CGPoint(x: 10.56, y: 12.63), controlPoint2: CGPoint(x: 10.03, y: 13.18))
        bezier2Path.addLine(to: CGPoint(x: 1.3, y: 13.18))
        bezier2Path.addLine(to: CGPoint(x: 1.3, y: 13.18))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 0.76, y: 11.62))
        bezier2Path.addCurve(to: CGPoint(x: 1.62, y: 12.55), controlPoint1: CGPoint(x: 0.76, y: 12.17), controlPoint2: CGPoint(x: 1.1, y: 12.55))
        bezier2Path.addLine(to: CGPoint(x: 9.07, y: 12.55))
        bezier2Path.addCurve(to: CGPoint(x: 9.93, y: 11.62), controlPoint1: CGPoint(x: 9.59, y: 12.55), controlPoint2: CGPoint(x: 9.93, y: 12.17))
        bezier2Path.addLine(to: CGPoint(x: 9.93, y: 6.59))
        bezier2Path.addLine(to: CGPoint(x: 0.76, y: 6.59))
        bezier2Path.addLine(to: CGPoint(x: 0.76, y: 11.62))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8.8, y: 6.02))
        bezier3Path.addLine(to: CGPoint(x: 8.8, y: 4.11))
        bezier3Path.addCurve(to: CGPoint(x: 5.33, y: 0.7), controlPoint1: CGPoint(x: 8.8, y: 2.13), controlPoint2: CGPoint(x: 7.34, y: 0.7))
        bezier3Path.addCurve(to: CGPoint(x: 1.85, y: 4.11), controlPoint1: CGPoint(x: 3.31, y: 0.7), controlPoint2: CGPoint(x: 1.85, y: 2.13))
        bezier3Path.addLine(to: CGPoint(x: 1.85, y: 6.02))
        bezier3Path.addLine(to: CGPoint(x: 1.19, y: 6.02))
        bezier3Path.addLine(to: CGPoint(x: 1.19, y: 4.06))
        bezier3Path.addCurve(to: CGPoint(x: 2.4, y: 1.22), controlPoint1: CGPoint(x: 1.19, y: 2.98), controlPoint2: CGPoint(x: 1.62, y: 1.97))
        bezier3Path.addCurve(to: CGPoint(x: 5.33, y: 0.04), controlPoint1: CGPoint(x: 3.19, y: 0.46), controlPoint2: CGPoint(x: 4.22, y: 0.04))
        bezier3Path.addCurve(to: CGPoint(x: 8.25, y: 1.22), controlPoint1: CGPoint(x: 6.43, y: 0.04), controlPoint2: CGPoint(x: 7.47, y: 0.46))
        bezier3Path.addCurve(to: CGPoint(x: 9.47, y: 4.06), controlPoint1: CGPoint(x: 9.03, y: 1.97), controlPoint2: CGPoint(x: 9.47, y: 2.98))
        bezier3Path.addLine(to: CGPoint(x: 9.47, y: 6.02))
        bezier3Path.addLine(to: CGPoint(x: 8.8, y: 6.02))
        bezier3Path.addLine(to: CGPoint(x: 8.8, y: 6.02))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()
        
        context.restoreGState()
        
    }
    
    
    
    
    @objc(PwdIconSmallResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
