//
//  Security.swift
//  ProjectName
//
//  Created by AuthorName on 2019/4/17.
//  Copyright © 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PasswordIcon : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 14)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.847, blue: 0.627, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.267, green: 0.267, blue: 0.267, alpha: 1.000)

        //// 安全.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.22, y: 7.13))
        bezierPath.addLine(to: CGPoint(x: 4.78, y: 7.13))
        bezierPath.addLine(to: CGPoint(x: 4.78, y: 6.33))
        bezierPath.addCurve(to: CGPoint(x: 5.32, y: 5.79), controlPoint1: CGPoint(x: 4.78, y: 6.03), controlPoint2: CGPoint(x: 5.02, y: 5.79))
        bezierPath.addLine(to: CGPoint(x: 10.68, y: 5.79))
        bezierPath.addCurve(to: CGPoint(x: 11.22, y: 6.33), controlPoint1: CGPoint(x: 10.98, y: 5.79), controlPoint2: CGPoint(x: 11.22, y: 6.03))
        bezierPath.addLine(to: CGPoint(x: 11.22, y: 7.13))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8, y: 13.98))
        bezier2Path.addCurve(to: CGPoint(x: 7.38, y: 13.78), controlPoint1: CGPoint(x: 7.78, y: 13.98), controlPoint2: CGPoint(x: 7.57, y: 13.91))
        bezier2Path.addLine(to: CGPoint(x: 4.63, y: 11.84))
        bezier2Path.addCurve(to: CGPoint(x: 2.09, y: 6.68), controlPoint1: CGPoint(x: 2.99, y: 10.55), controlPoint2: CGPoint(x: 2.09, y: 8.72))
        bezier2Path.addLine(to: CGPoint(x: 2.09, y: 2.99))
        bezier2Path.addLine(to: CGPoint(x: 2.09, y: 2.99))
        bezier2Path.addCurve(to: CGPoint(x: 2.4, y: 2.5), controlPoint1: CGPoint(x: 2.09, y: 2.78), controlPoint2: CGPoint(x: 2.21, y: 2.59))
        bezier2Path.addLine(to: CGPoint(x: 7.4, y: 0.13))
        bezier2Path.addLine(to: CGPoint(x: 7.4, y: 0.13))
        bezier2Path.addCurve(to: CGPoint(x: 7.45, y: 0.11), controlPoint1: CGPoint(x: 7.42, y: 0.12), controlPoint2: CGPoint(x: 7.43, y: 0.12))
        bezier2Path.addCurve(to: CGPoint(x: 8.54, y: 0.11), controlPoint1: CGPoint(x: 7.81, y: -0.01), controlPoint2: CGPoint(x: 8.19, y: -0.01))
        bezier2Path.addCurve(to: CGPoint(x: 8.6, y: 0.13), controlPoint1: CGPoint(x: 8.56, y: 0.12), controlPoint2: CGPoint(x: 8.58, y: 0.12))
        bezier2Path.addLine(to: CGPoint(x: 13.6, y: 2.5))
        bezier2Path.addLine(to: CGPoint(x: 13.6, y: 2.5))
        bezier2Path.addCurve(to: CGPoint(x: 13.91, y: 2.99), controlPoint1: CGPoint(x: 13.79, y: 2.59), controlPoint2: CGPoint(x: 13.91, y: 2.78))
        bezier2Path.addLine(to: CGPoint(x: 13.91, y: 6.68))
        bezier2Path.addCurve(to: CGPoint(x: 11.39, y: 11.82), controlPoint1: CGPoint(x: 13.91, y: 8.72), controlPoint2: CGPoint(x: 13.01, y: 10.55))
        bezier2Path.addLine(to: CGPoint(x: 8.62, y: 13.78))
        bezier2Path.addCurve(to: CGPoint(x: 8, y: 13.98), controlPoint1: CGPoint(x: 8.44, y: 13.91), controlPoint2: CGPoint(x: 8.22, y: 13.98))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 3.17, y: 3.33))
        bezier2Path.addLine(to: CGPoint(x: 3.17, y: 6.68))
        bezier2Path.addCurve(to: CGPoint(x: 5.27, y: 10.98), controlPoint1: CGPoint(x: 3.17, y: 8.38), controlPoint2: CGPoint(x: 3.92, y: 9.91))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 12.91))
        bezier2Path.addLine(to: CGPoint(x: 10.75, y: 10.96))
        bezier2Path.addCurve(to: CGPoint(x: 12.83, y: 6.68), controlPoint1: CGPoint(x: 12.08, y: 9.91), controlPoint2: CGPoint(x: 12.83, y: 8.38))
        bezier2Path.addLine(to: CGPoint(x: 12.83, y: 3.33))
        bezier2Path.addLine(to: CGPoint(x: 8.17, y: 1.12))
        bezier2Path.addCurve(to: CGPoint(x: 7.83, y: 1.12), controlPoint1: CGPoint(x: 8.06, y: 1.09), controlPoint2: CGPoint(x: 7.94, y: 1.09))
        bezier2Path.addLine(to: CGPoint(x: 3.17, y: 3.33))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 7.47, y: 3.33, width: 1.05, height: 6.2), cornerRadius: 0.53)
        fillColor2.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }




    @objc(SecurityResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
