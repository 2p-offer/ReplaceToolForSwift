//
//  Mine.swift
//  ProjectName
//
//  Created by AuthorName on 2019/4/17.
//  Copyright © 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class UserIcon : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 14)


        //// Color Declarations
        let fillColor = UIColor(red: 0.267, green: 0.267, blue: 0.267, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.847, blue: 0.627, alpha: 1.000)

        //// 我的.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.1, y: 13.98))
        bezierPath.addLine(to: CGPoint(x: 2.9, y: 13.98))
        bezierPath.addCurve(to: CGPoint(x: 1.83, y: 12.91), controlPoint1: CGPoint(x: 2.31, y: 13.98), controlPoint2: CGPoint(x: 1.83, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 1.83, y: 10.7))
        bezierPath.addLine(to: CGPoint(x: 1.83, y: 10.7))
        bezierPath.addCurve(to: CGPoint(x: 2.19, y: 9.89), controlPoint1: CGPoint(x: 1.83, y: 10.39), controlPoint2: CGPoint(x: 1.96, y: 10.1))
        bezierPath.addLine(to: CGPoint(x: 5.16, y: 7.27))
        bezierPath.addCurve(to: CGPoint(x: 4.03, y: 4.7), controlPoint1: CGPoint(x: 4.45, y: 6.45), controlPoint2: CGPoint(x: 4.09, y: 5.32))
        bezierPath.addCurve(to: CGPoint(x: 4.97, y: 1.18), controlPoint1: CGPoint(x: 3.96, y: 4.03), controlPoint2: CGPoint(x: 3.91, y: 2.35))
        bezierPath.addCurve(to: CGPoint(x: 7.99, y: 0.02), controlPoint1: CGPoint(x: 5.66, y: 0.41), controlPoint2: CGPoint(x: 6.68, y: 0.02))
        bezierPath.addCurve(to: CGPoint(x: 11.15, y: 1.24), controlPoint1: CGPoint(x: 9.38, y: 0.02), controlPoint2: CGPoint(x: 10.44, y: 0.43))
        bezierPath.addCurve(to: CGPoint(x: 12.03, y: 4.72), controlPoint1: CGPoint(x: 12.23, y: 2.48), controlPoint2: CGPoint(x: 12.1, y: 4.21))
        bezierPath.addCurve(to: CGPoint(x: 10.87, y: 7.31), controlPoint1: CGPoint(x: 11.9, y: 5.72), controlPoint2: CGPoint(x: 11.47, y: 6.64))
        bezierPath.addLine(to: CGPoint(x: 13.81, y: 9.9))
        bezierPath.addLine(to: CGPoint(x: 13.81, y: 9.9))
        bezierPath.addLine(to: CGPoint(x: 13.8, y: 9.89))
        bezierPath.addCurve(to: CGPoint(x: 14.17, y: 10.7), controlPoint1: CGPoint(x: 14.04, y: 10.1), controlPoint2: CGPoint(x: 14.17, y: 10.39))
        bezierPath.addLine(to: CGPoint(x: 14.17, y: 12.91))
        bezierPath.addCurve(to: CGPoint(x: 13.1, y: 13.98), controlPoint1: CGPoint(x: 14.17, y: 13.5), controlPoint2: CGPoint(x: 13.69, y: 13.98))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.99, y: 1.09))
        bezierPath.addCurve(to: CGPoint(x: 5.77, y: 1.9), controlPoint1: CGPoint(x: 7, y: 1.09), controlPoint2: CGPoint(x: 6.25, y: 1.36))
        bezierPath.addCurve(to: CGPoint(x: 5.09, y: 4.59), controlPoint1: CGPoint(x: 5, y: 2.75), controlPoint2: CGPoint(x: 5.04, y: 4.06))
        bezierPath.addCurve(to: CGPoint(x: 6.28, y: 6.87), controlPoint1: CGPoint(x: 5.15, y: 5.18), controlPoint2: CGPoint(x: 5.57, y: 6.31))
        bezierPath.addLine(to: CGPoint(x: 6.28, y: 6.87))
        bezierPath.addCurve(to: CGPoint(x: 6.49, y: 7.27), controlPoint1: CGPoint(x: 6.41, y: 6.96), controlPoint2: CGPoint(x: 6.48, y: 7.11))
        bezierPath.addLine(to: CGPoint(x: 6.49, y: 7.27))
        bezierPath.addCurve(to: CGPoint(x: 6.31, y: 7.69), controlPoint1: CGPoint(x: 6.49, y: 7.43), controlPoint2: CGPoint(x: 6.43, y: 7.58))
        bezierPath.addLine(to: CGPoint(x: 2.9, y: 10.7))
        bezierPath.addLine(to: CGPoint(x: 2.9, y: 12.91))
        bezierPath.addLine(to: CGPoint(x: 13.1, y: 12.91))
        bezierPath.addLine(to: CGPoint(x: 13.1, y: 10.7))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 7.72))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 7.73))
        bezierPath.addCurve(to: CGPoint(x: 9.53, y: 7.3), controlPoint1: CGPoint(x: 9.59, y: 7.62), controlPoint2: CGPoint(x: 9.52, y: 7.46))
        bezierPath.addLine(to: CGPoint(x: 9.53, y: 7.3))
        bezierPath.addCurve(to: CGPoint(x: 9.74, y: 6.89), controlPoint1: CGPoint(x: 9.54, y: 7.14), controlPoint2: CGPoint(x: 9.61, y: 6.99))
        bezierPath.addCurve(to: CGPoint(x: 10.97, y: 4.57), controlPoint1: CGPoint(x: 10.49, y: 6.32), controlPoint2: CGPoint(x: 10.87, y: 5.32))
        bezierPath.addCurve(to: CGPoint(x: 10.34, y: 1.95), controlPoint1: CGPoint(x: 11, y: 4.3), controlPoint2: CGPoint(x: 11.15, y: 2.87))
        bezierPath.addCurve(to: CGPoint(x: 7.99, y: 1.09), controlPoint1: CGPoint(x: 9.84, y: 1.38), controlPoint2: CGPoint(x: 9.05, y: 1.09))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.67, y: 12.1))
        bezier2Path.addLine(to: CGPoint(x: 7.33, y: 12.1))
        bezier2Path.addLine(to: CGPoint(x: 7.33, y: 9.42))
        bezier2Path.addCurve(to: CGPoint(x: 7.87, y: 8.88), controlPoint1: CGPoint(x: 7.33, y: 9.12), controlPoint2: CGPoint(x: 7.57, y: 8.88))
        bezier2Path.addLine(to: CGPoint(x: 8.13, y: 8.88))
        bezier2Path.addCurve(to: CGPoint(x: 8.67, y: 9.42), controlPoint1: CGPoint(x: 8.43, y: 8.88), controlPoint2: CGPoint(x: 8.67, y: 9.12))
        bezier2Path.addLine(to: CGPoint(x: 8.67, y: 12.1))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }




    @objc(MineResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
