//
//  Tel.swift
//  ProjectName
//
//  Created by AuthorName on 2019/4/17.
//  Copyright © 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class MobileIcon : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor = UIColor(red: 0.267, green: 0.267, blue: 0.267, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.847, blue: 0.627, alpha: 1.000)

        //// 电话.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.21, y: 13.98))
        bezierPath.addCurve(to: CGPoint(x: 6.93, y: 9.38), controlPoint1: CGPoint(x: 10.82, y: 13.98), controlPoint2: CGPoint(x: 8.51, y: 12.33))
        bezierPath.addCurve(to: CGPoint(x: 7.44, y: 0.71), controlPoint1: CGPoint(x: 5.07, y: 5.9), controlPoint2: CGPoint(x: 5.27, y: 2.33))
        bezierPath.addCurve(to: CGPoint(x: 9.87, y: 0.07), controlPoint1: CGPoint(x: 8.15, y: 0.18), controlPoint2: CGPoint(x: 9.1, y: -0.07))
        bezierPath.addCurve(to: CGPoint(x: 11.8, y: 2.82), controlPoint1: CGPoint(x: 10.84, y: 0.25), controlPoint2: CGPoint(x: 11.54, y: 2.05))
        bezierPath.addCurve(to: CGPoint(x: 11.92, y: 5.31), controlPoint1: CGPoint(x: 12.44, y: 4.74), controlPoint2: CGPoint(x: 12.05, y: 5.17))
        bezierPath.addCurve(to: CGPoint(x: 10.17, y: 6.23), controlPoint1: CGPoint(x: 11.73, y: 5.52), controlPoint2: CGPoint(x: 11.3, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 11.54, y: 8.57), controlPoint1: CGPoint(x: 10.49, y: 7.11), controlPoint2: CGPoint(x: 11.18, y: 8.24))
        bezierPath.addCurve(to: CGPoint(x: 11.57, y: 8.56), controlPoint1: CGPoint(x: 11.55, y: 8.57), controlPoint2: CGPoint(x: 11.56, y: 8.56))
        bezierPath.addCurve(to: CGPoint(x: 13.69, y: 7.86), controlPoint1: CGPoint(x: 12.61, y: 8.04), controlPoint2: CGPoint(x: 13.25, y: 7.78))
        bezierPath.addCurve(to: CGPoint(x: 16.34, y: 12.04), controlPoint1: CGPoint(x: 14.95, y: 8.08), controlPoint2: CGPoint(x: 16.34, y: 10.94))
        bezierPath.addCurve(to: CGPoint(x: 14.78, y: 13.74), controlPoint1: CGPoint(x: 16.34, y: 12.93), controlPoint2: CGPoint(x: 15.39, y: 13.55))
        bezierPath.addCurve(to: CGPoint(x: 13.21, y: 13.98), controlPoint1: CGPoint(x: 14.26, y: 13.9), controlPoint2: CGPoint(x: 13.73, y: 13.98))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.62, y: 13.22))
        bezierPath.addLine(to: CGPoint(x: 14.63, y: 13.22))
        bezierPath.addLine(to: CGPoint(x: 14.62, y: 13.22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.42, y: 1.11))
        bezierPath.addCurve(to: CGPoint(x: 8.08, y: 1.58), controlPoint1: CGPoint(x: 8.99, y: 1.11), controlPoint2: CGPoint(x: 8.47, y: 1.29))
        bezierPath.addCurve(to: CGPoint(x: 7.89, y: 8.87), controlPoint1: CGPoint(x: 6.67, y: 2.64), controlPoint2: CGPoint(x: 6.01, y: 5.37))
        bezierPath.addCurve(to: CGPoint(x: 14.46, y: 12.71), controlPoint1: CGPoint(x: 9.19, y: 11.3), controlPoint2: CGPoint(x: 11.61, y: 13.59))
        bezierPath.addCurve(to: CGPoint(x: 15.26, y: 12.04), controlPoint1: CGPoint(x: 14.87, y: 12.58), controlPoint2: CGPoint(x: 15.26, y: 12.22))
        bezierPath.addCurve(to: CGPoint(x: 13.51, y: 8.92), controlPoint1: CGPoint(x: 15.26, y: 11.12), controlPoint2: CGPoint(x: 14.02, y: 9.05))
        bezierPath.addCurve(to: CGPoint(x: 12.05, y: 9.52), controlPoint1: CGPoint(x: 13.38, y: 8.93), controlPoint2: CGPoint(x: 13.02, y: 9.04))
        bezierPath.addCurve(to: CGPoint(x: 11.53, y: 9.71), controlPoint1: CGPoint(x: 11.74, y: 9.68), controlPoint2: CGPoint(x: 11.67, y: 9.71))
        bezierPath.addLine(to: CGPoint(x: 11.53, y: 9.71))
        bezierPath.addCurve(to: CGPoint(x: 8.99, y: 6.05), controlPoint1: CGPoint(x: 10.46, y: 9.71), controlPoint2: CGPoint(x: 9.17, y: 6.83))
        bezierPath.addCurve(to: CGPoint(x: 9.6, y: 5.29), controlPoint1: CGPoint(x: 8.89, y: 5.6), controlPoint2: CGPoint(x: 9.24, y: 5.45))
        bezierPath.addCurve(to: CGPoint(x: 11.08, y: 4.61), controlPoint1: CGPoint(x: 10.39, y: 4.96), controlPoint2: CGPoint(x: 10.89, y: 4.73))
        bezierPath.addCurve(to: CGPoint(x: 9.66, y: 1.13), controlPoint1: CGPoint(x: 11.2, y: 3.81), controlPoint2: CGPoint(x: 10.11, y: 1.31))
        bezierPath.addCurve(to: CGPoint(x: 9.42, y: 1.11), controlPoint1: CGPoint(x: 9.58, y: 1.12), controlPoint2: CGPoint(x: 9.5, y: 1.11))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 14.95, y: 5.18))
        bezier2Path.addLine(to: CGPoint(x: 13.68, y: 4.72))
        bezier2Path.addCurve(to: CGPoint(x: 12.83, y: 1.05), controlPoint1: CGPoint(x: 14.2, y: 3.28), controlPoint2: CGPoint(x: 13.89, y: 1.95))
        bezier2Path.addLine(to: CGPoint(x: 13.7, y: 0.02))
        bezier2Path.addCurve(to: CGPoint(x: 14.95, y: 5.18), controlPoint1: CGPoint(x: 15.2, y: 1.28), controlPoint2: CGPoint(x: 15.67, y: 3.21))
        bezier2Path.close()
        fillColor2.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }




    @objc(TelResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
