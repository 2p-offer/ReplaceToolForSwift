//
//  VerCodeIcon.swift
//  ProjectName
//
//  Created by AuthorName on 2019/4/17.
//  Copyright © 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class VerCodeIcon : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// 验证码.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.07, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 13.82, y: 8.87), controlPoint1: CGPoint(x: 13.99, y: 6.68), controlPoint2: CGPoint(x: 14.01, y: 7.8))
        bezierPath.addCurve(to: CGPoint(x: 10.99, y: 13.29), controlPoint1: CGPoint(x: 13.5, y: 10.72), controlPoint2: CGPoint(x: 12.49, y: 12.18))
        bezierPath.addCurve(to: CGPoint(x: 7.84, y: 15.6), controlPoint1: CGPoint(x: 9.94, y: 14.07), controlPoint2: CGPoint(x: 8.89, y: 14.83))
        bezierPath.addCurve(to: CGPoint(x: 6.44, y: 15.64), controlPoint1: CGPoint(x: 7.37, y: 15.95), controlPoint2: CGPoint(x: 6.89, y: 15.97))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 13), controlPoint1: CGPoint(x: 5.25, y: 14.77), controlPoint2: CGPoint(x: 4.04, y: 13.91))
        bezierPath.addCurve(to: CGPoint(x: 0.33, y: 8.39), controlPoint1: CGPoint(x: 1.41, y: 11.82), controlPoint2: CGPoint(x: 0.49, y: 10.26))
        bezierPath.addCurve(to: CGPoint(x: 0.24, y: 3.12), controlPoint1: CGPoint(x: 0.19, y: 6.64), controlPoint2: CGPoint(x: 0.24, y: 4.88))
        bezierPath.addCurve(to: CGPoint(x: 0.86, y: 2.31), controlPoint1: CGPoint(x: 0.24, y: 2.74), controlPoint2: CGPoint(x: 0.48, y: 2.44))
        bezierPath.addCurve(to: CGPoint(x: 6.85, y: 0.42), controlPoint1: CGPoint(x: 2.85, y: 1.67), controlPoint2: CGPoint(x: 4.85, y: 1.03))
        bezierPath.addCurve(to: CGPoint(x: 7.7, y: 0.49), controlPoint1: CGPoint(x: 7.11, y: 0.34), controlPoint2: CGPoint(x: 7.43, y: 0.41))
        bezierPath.addCurve(to: CGPoint(x: 13.24, y: 2.26), controlPoint1: CGPoint(x: 9.55, y: 1.07), controlPoint2: CGPoint(x: 11.39, y: 1.67))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 3.3), controlPoint1: CGPoint(x: 13.75, y: 2.43), controlPoint2: CGPoint(x: 14, y: 2.77))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 5.58), controlPoint1: CGPoint(x: 14, y: 4.06), controlPoint2: CGPoint(x: 14, y: 4.82))
        bezierPath.addCurve(to: CGPoint(x: 14.07, y: 5.58), controlPoint1: CGPoint(x: 14.02, y: 5.58), controlPoint2: CGPoint(x: 14.05, y: 5.58))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 0.93, y: 5.61))
        bezierPath.addCurve(to: CGPoint(x: 0.93, y: 7.37), controlPoint1: CGPoint(x: 0.93, y: 6.2), controlPoint2: CGPoint(x: 0.92, y: 6.78))
        bezierPath.addCurve(to: CGPoint(x: 3.46, y: 12.52), controlPoint1: CGPoint(x: 0.97, y: 9.48), controlPoint2: CGPoint(x: 1.83, y: 11.21))
        bezierPath.addCurve(to: CGPoint(x: 6.67, y: 14.89), controlPoint1: CGPoint(x: 4.5, y: 13.35), controlPoint2: CGPoint(x: 5.61, y: 14.09))
        bezierPath.addCurve(to: CGPoint(x: 7.56, y: 14.88), controlPoint1: CGPoint(x: 6.99, y: 15.13), controlPoint2: CGPoint(x: 7.25, y: 15.12))
        bezierPath.addCurve(to: CGPoint(x: 10.58, y: 12.66), controlPoint1: CGPoint(x: 8.56, y: 14.13), controlPoint2: CGPoint(x: 9.58, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 13.24, y: 7.92), controlPoint1: CGPoint(x: 12.15, y: 11.47), controlPoint2: CGPoint(x: 13.12, y: 9.9))
        bezierPath.addCurve(to: CGPoint(x: 13.29, y: 3.61), controlPoint1: CGPoint(x: 13.33, y: 6.49), controlPoint2: CGPoint(x: 13.28, y: 5.05))
        bezierPath.addCurve(to: CGPoint(x: 12.73, y: 2.89), controlPoint1: CGPoint(x: 13.3, y: 3.22), controlPoint2: CGPoint(x: 13.1, y: 3.01))
        bezierPath.addCurve(to: CGPoint(x: 7.5, y: 1.21), controlPoint1: CGPoint(x: 10.99, y: 2.34), controlPoint2: CGPoint(x: 9.25, y: 1.76))
        bezierPath.addCurve(to: CGPoint(x: 6.76, y: 1.2), controlPoint1: CGPoint(x: 7.27, y: 1.14), controlPoint2: CGPoint(x: 6.99, y: 1.13))
        bezierPath.addCurve(to: CGPoint(x: 1.49, y: 2.89), controlPoint1: CGPoint(x: 5, y: 1.75), controlPoint2: CGPoint(x: 3.25, y: 2.33))
        bezierPath.addCurve(to: CGPoint(x: 0.93, y: 3.65), controlPoint1: CGPoint(x: 1.1, y: 3.02), controlPoint2: CGPoint(x: 0.93, y: 3.25))
        bezierPath.addCurve(to: CGPoint(x: 0.93, y: 5.61), controlPoint1: CGPoint(x: 0.94, y: 4.3), controlPoint2: CGPoint(x: 0.93, y: 4.96))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 7.12, y: 4.8))
        bezier2Path.addCurve(to: CGPoint(x: 10.43, y: 4.8), controlPoint1: CGPoint(x: 8.22, y: 4.8), controlPoint2: CGPoint(x: 9.33, y: 4.8))
        bezier2Path.addCurve(to: CGPoint(x: 10.88, y: 5.1), controlPoint1: CGPoint(x: 10.65, y: 4.8), controlPoint2: CGPoint(x: 10.9, y: 4.77))
        bezier2Path.addCurve(to: CGPoint(x: 10.43, y: 5.48), controlPoint1: CGPoint(x: 10.87, y: 5.37), controlPoint2: CGPoint(x: 10.71, y: 5.49))
        bezier2Path.addCurve(to: CGPoint(x: 7.99, y: 5.47), controlPoint1: CGPoint(x: 9.62, y: 5.47), controlPoint2: CGPoint(x: 8.8, y: 5.5))
        bezier2Path.addCurve(to: CGPoint(x: 7.46, y: 5.99), controlPoint1: CGPoint(x: 7.58, y: 5.46), controlPoint2: CGPoint(x: 7.46, y: 5.6))
        bezier2Path.addCurve(to: CGPoint(x: 7.46, y: 10.99), controlPoint1: CGPoint(x: 7.48, y: 7.66), controlPoint2: CGPoint(x: 7.47, y: 9.32))
        bezier2Path.addCurve(to: CGPoint(x: 7.32, y: 11.44), controlPoint1: CGPoint(x: 7.46, y: 11.14), controlPoint2: CGPoint(x: 7.42, y: 11.34))
        bezier2Path.addCurve(to: CGPoint(x: 6.92, y: 11.45), controlPoint1: CGPoint(x: 7.25, y: 11.51), controlPoint2: CGPoint(x: 7.02, y: 11.51))
        bezier2Path.addCurve(to: CGPoint(x: 6.78, y: 11.07), controlPoint1: CGPoint(x: 6.83, y: 11.39), controlPoint2: CGPoint(x: 6.79, y: 11.2))
        bezier2Path.addCurve(to: CGPoint(x: 6.78, y: 6), controlPoint1: CGPoint(x: 6.78, y: 9.38), controlPoint2: CGPoint(x: 6.78, y: 7.69))
        bezier2Path.addCurve(to: CGPoint(x: 6.27, y: 5.48), controlPoint1: CGPoint(x: 6.78, y: 5.48), controlPoint2: CGPoint(x: 6.78, y: 5.48))
        bezier2Path.addCurve(to: CGPoint(x: 3.95, y: 5.48), controlPoint1: CGPoint(x: 5.5, y: 5.48), controlPoint2: CGPoint(x: 4.72, y: 5.48))
        bezier2Path.addCurve(to: CGPoint(x: 3.72, y: 5.47), controlPoint1: CGPoint(x: 3.87, y: 5.48), controlPoint2: CGPoint(x: 3.76, y: 5.51))
        bezier2Path.addCurve(to: CGPoint(x: 3.36, y: 5.09), controlPoint1: CGPoint(x: 3.58, y: 5.36), controlPoint2: CGPoint(x: 3.39, y: 5.24))
        bezier2Path.addCurve(to: CGPoint(x: 3.72, y: 4.8), controlPoint1: CGPoint(x: 3.3, y: 4.84), controlPoint2: CGPoint(x: 3.52, y: 4.8))
        bezier2Path.addCurve(to: CGPoint(x: 7.12, y: 4.8), controlPoint1: CGPoint(x: 4.85, y: 4.8), controlPoint2: CGPoint(x: 5.99, y: 4.8))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }




    @objc(VerCodeIconResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
