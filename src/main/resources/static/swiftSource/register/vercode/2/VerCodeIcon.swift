//
//  Remind.swift
//  ProjectName
//
//  Created by AuthorName on 2019/4/17.
//  Copyright © 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class VerCodeIcon : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 14), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 14)


        //// Color Declarations
        let fillColor = UIColor(red: 0.267, green: 0.267, blue: 0.267, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.847, blue: 0.627, alpha: 1.000)

        //// 提醒.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.9, y: 11.44))
        bezierPath.addLine(to: CGPoint(x: 1.9, y: 11.44))
        bezierPath.addCurve(to: CGPoint(x: 1.85, y: 11.44), controlPoint1: CGPoint(x: 1.88, y: 11.44), controlPoint2: CGPoint(x: 1.87, y: 11.44))
        bezierPath.addCurve(to: CGPoint(x: 1.36, y: 10.86), controlPoint1: CGPoint(x: 1.56, y: 11.42), controlPoint2: CGPoint(x: 1.34, y: 11.16))
        bezierPath.addCurve(to: CGPoint(x: 1.9, y: 5.1), controlPoint1: CGPoint(x: 1.37, y: 10.83), controlPoint2: CGPoint(x: 1.64, y: 7.75))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 0.02), controlPoint1: CGPoint(x: 2.21, y: 2.06), controlPoint2: CGPoint(x: 4.26, y: 0.02))
        bezierPath.addCurve(to: CGPoint(x: 12.1, y: 5.1), controlPoint1: CGPoint(x: 9.63, y: 0.02), controlPoint2: CGPoint(x: 11.78, y: 2.16))
        bezierPath.addCurve(to: CGPoint(x: 12.64, y: 10.86), controlPoint1: CGPoint(x: 12.36, y: 7.55), controlPoint2: CGPoint(x: 12.63, y: 10.83))
        bezierPath.addCurve(to: CGPoint(x: 12.14, y: 11.44), controlPoint1: CGPoint(x: 12.66, y: 11.16), controlPoint2: CGPoint(x: 12.44, y: 11.42))
        bezierPath.addCurve(to: CGPoint(x: 11.57, y: 10.95), controlPoint1: CGPoint(x: 11.85, y: 11.47), controlPoint2: CGPoint(x: 11.59, y: 11.25))
        bezierPath.addCurve(to: CGPoint(x: 11.03, y: 5.21), controlPoint1: CGPoint(x: 11.56, y: 10.92), controlPoint2: CGPoint(x: 11.29, y: 7.65))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 1.09), controlPoint1: CGPoint(x: 10.81, y: 3.17), controlPoint2: CGPoint(x: 9.35, y: 1.09))
        bezierPath.addCurve(to: CGPoint(x: 2.97, y: 5.21), controlPoint1: CGPoint(x: 4.84, y: 1.09), controlPoint2: CGPoint(x: 3.22, y: 2.75))
        bezierPath.addCurve(to: CGPoint(x: 2.43, y: 10.95), controlPoint1: CGPoint(x: 2.71, y: 7.85), controlPoint2: CGPoint(x: 2.44, y: 10.92))
        bezierPath.addCurve(to: CGPoint(x: 1.9, y: 11.44), controlPoint1: CGPoint(x: 2.41, y: 11.23), controlPoint2: CGPoint(x: 2.18, y: 11.44))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 13.44, y: 11.87))
        bezier2Path.addLine(to: CGPoint(x: 0.56, y: 11.87))
        bezier2Path.addCurve(to: CGPoint(x: 0.02, y: 11.33), controlPoint1: CGPoint(x: 0.26, y: 11.87), controlPoint2: CGPoint(x: 0.02, y: 11.63))
        bezier2Path.addCurve(to: CGPoint(x: 0.56, y: 10.79), controlPoint1: CGPoint(x: 0.02, y: 11.03), controlPoint2: CGPoint(x: 0.26, y: 10.79))
        bezier2Path.addLine(to: CGPoint(x: 13.44, y: 10.79))
        bezier2Path.addCurve(to: CGPoint(x: 13.98, y: 11.33), controlPoint1: CGPoint(x: 13.74, y: 10.79), controlPoint2: CGPoint(x: 13.98, y: 11.03))
        bezier2Path.addCurve(to: CGPoint(x: 13.44, y: 11.87), controlPoint1: CGPoint(x: 13.98, y: 11.63), controlPoint2: CGPoint(x: 13.74, y: 11.87))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 7.13, y: 13.98))
        bezier3Path.addCurve(to: CGPoint(x: 4.72, y: 11.55), controlPoint1: CGPoint(x: 5.8, y: 13.98), controlPoint2: CGPoint(x: 4.72, y: 12.89))
        bezier3Path.addCurve(to: CGPoint(x: 5.26, y: 11.01), controlPoint1: CGPoint(x: 4.72, y: 11.25), controlPoint2: CGPoint(x: 4.96, y: 11.01))
        bezier3Path.addCurve(to: CGPoint(x: 5.79, y: 11.55), controlPoint1: CGPoint(x: 5.55, y: 11.01), controlPoint2: CGPoint(x: 5.79, y: 11.25))
        bezier3Path.addCurve(to: CGPoint(x: 7.13, y: 12.91), controlPoint1: CGPoint(x: 5.79, y: 12.3), controlPoint2: CGPoint(x: 6.39, y: 12.91))
        bezier3Path.addCurve(to: CGPoint(x: 8.48, y: 11.55), controlPoint1: CGPoint(x: 7.87, y: 12.91), controlPoint2: CGPoint(x: 8.48, y: 12.3))
        bezier3Path.addCurve(to: CGPoint(x: 9.01, y: 11.01), controlPoint1: CGPoint(x: 8.48, y: 11.25), controlPoint2: CGPoint(x: 8.72, y: 11.01))
        bezier3Path.addCurve(to: CGPoint(x: 9.55, y: 11.55), controlPoint1: CGPoint(x: 9.31, y: 11.01), controlPoint2: CGPoint(x: 9.55, y: 11.25))
        bezier3Path.addCurve(to: CGPoint(x: 7.13, y: 13.98), controlPoint1: CGPoint(x: 9.55, y: 12.89), controlPoint2: CGPoint(x: 8.47, y: 13.98))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 4.63, y: 9.79))
        bezier4Path.addLine(to: CGPoint(x: 3.72, y: 9.79))
        bezier4Path.addLine(to: CGPoint(x: 4.09, y: 5.46))
        bezier4Path.addLine(to: CGPoint(x: 5, y: 5.46))
        bezier4Path.addCurve(to: CGPoint(x: 5.39, y: 6), controlPoint1: CGPoint(x: 5.24, y: 5.46), controlPoint2: CGPoint(x: 5.41, y: 5.7))
        bezier4Path.addLine(to: CGPoint(x: 5.1, y: 9.25))
        bezier4Path.addCurve(to: CGPoint(x: 4.63, y: 9.79), controlPoint1: CGPoint(x: 5.08, y: 9.55), controlPoint2: CGPoint(x: 4.87, y: 9.79))
        bezier4Path.close()
        fillColor2.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }




    @objc(RemindResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
